#pragma once

#define BASE_PATH sfs::path("@PROJECT_SOURCE_DIR@/tests")

#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_vector.hpp>
#include <filesystem>
#include "../src/core/deployerentry.hpp"
#include <vector>

namespace sfs = std::filesystem;


const sfs::path DATA_DIR = BASE_PATH / "data";
void verifyDirsAreEqual(sfs::path first_dir, sfs::path second_dir, bool test_content = false);
void resetAppDir();
void resetStagingDir();
void verifyFilesAreEqual(sfs::path first_file, sfs::path second_file);

class DeployerEntryVectorMatcher : public Catch::Matchers::MatcherBase<std::vector<std::weak_ptr<DeployerEntry>>> {
    std::vector<std::weak_ptr<DeployerEntry>> m_expected;
public:
    DeployerEntryVectorMatcher(std::vector<std::weak_ptr<DeployerEntry>> const& expected)
        : m_expected(expected) {}

    bool match(std::vector<std::weak_ptr<DeployerEntry>> const& actual) const override;

    std::string describe() const override;
};
inline DeployerEntryVectorMatcher EqualsDeployerEntryVector(
    std::vector<std::weak_ptr<DeployerEntry>> const& expected) {
    return DeployerEntryVectorMatcher(expected);
}
